// Koodia lainattu Microsoftilta (no-license)
// This is the service worker with the Cache-first network

const CACHE = "yrityshaku-v1";
const precacheFiles = [
    'index.html',
    'app.js',
    'external-vendor/colorffy.matgradient.css'
];

self.addEventListener("install", function (event) {
    console.log("üïê Asentaa serviceworkeria...");

    console.log("‚úîÔ∏è Skipataan waiting-osio (kts. kommentti koodissa)");
    /*
        Yleens√§ skipWaiting ei ole hyv√§ idea, sill√§ jos k√§ytt√§j√§ll√§ on
        esimerkiksi useampi v√§lilehti auki, √§ppin eri versiot saattavat
        sotkea toisiaan.

        Mik√§li t√§t√§ ei tehd√§, selain p√§√§tt√§√§ milloin on hyv√§ aika vaihtaa
        serviceworker uudempaan. Esimerkiksi chrome tekee t√§m√§n yleens√§ silloin,
        kun kaikki t√§m√§n verkkotunnuksen v√§lilehdet suljetaan.
    */
    self.skipWaiting();

    event.waitUntil(
        caches.open(CACHE).then(function (cache) {
            console.log("‚úîÔ∏è Ladataan data cacheen");
            /*
                Lataa precacheFilesin sis√§lt√§m√§t tiedostot cacheen.
                Jos jokin noista tiedostoista heitt√§√§ 404, koko tsydeemi
                menee tilttiin. Pit√§isi keksi√§ jonkinlainen virheidenk√§sittelij√§
                t√§t√§ varten.
            */
            return cache.addAll(precacheFiles);
        })
    );
});

// Ottaa sivun hallintaan
self.addEventListener("activate", function (event) {
    console.log("üïê Ottaa sivua haltuun...");
    event.waitUntil(self.clients.claim());
    console.log('‚úîÔ∏è Sivu otettu haltuun.')
});

/*
    Ottaa navigaattorin fetchin haltuun (kts. Chromen DevTools Network -v√§lilehti).
    Yritt√§√§ tarjoilla pyydetyn tiedoston cachesta ja ladata uudemman version palvelimelta
    cacheen t√§m√§n j√§lkeen.
*/
self.addEventListener("fetch", function (event) { 
  if (event.request.method !== "GET") return;

  event.respondWith(
    fromCache(event.request).then(
      function (response) {
        /*
            Pyydetty tiedosto l√∂ytyi cachesta, joten palvellaan se.
            Ladataan palvelimelta uusin versio t√§st√§ tiedostosta ja tallennetaan se cacheen
            my√∂hemp√§√§ k√§ytt√∂√§ varten
        */
        event.waitUntil(
          fetch(event.request).then(function (response) {
            return updateCache(event.request, response);
          })
        );

        return response;
      },
      function () {
        // Pyydetty√§ responsea ei l√∂ytynyt cahcesta, joten se joudutaan imuroimaan palvelimelta
        return fetch(event.request)
          .then(function (response) {
            // Lis√§t√§√§n/p√§ivitet√§√§n pyynt√∂ cacheen my√∂hemp√§√§ k√§ytt√∂√§ varten
            event.waitUntil(updateCache(event.request, response.clone()));

            return response;
          })
          .catch(function (err) {
            console.log(`‚úîÔ∏è Ei internetyhteytt√§ tai cachea. (${err})`);
          });
      }
    )
  );
});

function fromCache(request) {
    /*
        Jos request l√∂ytyy cachesta, annetaan (return) se
        Jos ei, niin no-match :(
    */
    return caches.open(CACHE).then(function (cache) {
        return cache.match(request).then(function (matching) {
        if (!matching || matching.status === 404) {
            return Promise.reject("no-match");
        }

        return matching;
        });
    });
}

function updateCache(request, response) {
    /*
        P√§ivitet√§√§n dataa cacheen
    */
    return caches.open(CACHE).then(function (cache) {
        return cache.put(request, response);
    });
}
